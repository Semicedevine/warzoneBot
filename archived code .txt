class Map:
    regions = {}
    superRegions = {}

    def getRegionById(self, id):
        if self.regions.hasOwnProperty(id):
            return self.regions[id]
        else:
            return None

    def getSuperRegionById(self, id):
        if self.superRegions.hasOwnProperty(id):
            return self.superRegions[id]
        else:
            return None

    def getOwnedRegions(self, owner):
        ownedRegions = []
        for i in self.regions: #keep watch on this line write here... if it doesn't work, use range()...
            if self.regions.hasOwnProperty(i):
                region = self.regions[i]
                if region.owner == owner:
                    ownedRegions.append(region)
                
        return ownedRegions

https://stackoverflow.com/questions/610883/how-to-know-if-an-object-has-an-attribute-in-python
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty



var s = "0 353 231 None 1 396 245 None 2 390 293 None 3 465 244 None";
var f = s.split(" ");
for (i = 0; i < 200; i++) {
var index = f.indexOf("None");
if (index > -1) {
  f.splice(index, 1);
}
}

var t = f.length - 2

while (t > 0) {
	f.splice(t, 0, "")
    t = t - 3
}

var answer = f.join('", "');
var answer2 = '"' + answer + '"'
document.writeln(answer2);
document.writeln("<br><br>")
document.writeln(t);

----THE ABOVE IS JS THAT CAN PROCESS DATA PRETTY GOOD----



var s = ["0", "0", "353", "231", "1", "1", "396", "245", "2", "1", "390", "293", "3", "1", "465", "244", "4", "1", "465", "282", "5", "1", "543", "228", "6", "1", "614", "293", "7", "1", "537", "297", "8", "2", "379", "334", "9", "2", "424", "327", "10", "2", "427", "363", "11", "2", "387", "367", "12", "2", "358", "384", "13", "2", "398", "394", "14", "2", "440", "409", "15", "3", "463", "340", "16", "3", "501", "360", "17", "3", "557", "354", "18", "3", "531", "389", "19", "3", "507", "404", "20", "3", "478", "401", "21", "4", "414", "460", "22", "4", "363", "437", "23", "4", "532", "469", "24", "4", "482", "504", "25", "0", "222", "477", "26", "5", "538", "562", "27", "5", "585", "542", "28", "5", "654", "641", "29", "5", "586", "674", "30", "5", "599", "740", "31", "6", "634", "984", "32", "6", "1167", "999", "33", "6", "1007", "974", "34", "6", "1007", "974", "35", "7", "1357", "981", "36", "7", "735", "230", "37", "7", "733", "175", "38", "7", "773", "185", "39", "7", "804", "207", "40", "7", "829", "170", "41", "8", "834", "233", "42", "8", "1012", "740", "43", "8", "1112", "681", "44", "8", "987", "699", "45", "8", "1019", "669", "46", "9", "976", "650", "47", "9", "1006", "599", "48", "9", "953", "579", "49", "9", "981", "513", "50", "9", "930", "532", "51", "10", "885", "534", "52", "10", "1058", "615", "53", "10", "1077", "579", "54", "10", "1079", "534", "55", "10", "1031", "509", "56", "11", "1029", "439", "57", "11", "974", "436", "58", "11", "944", "487", "59", "11", "885", "484", "60", "11", "838", "462", "61", "12", "899", "425", "62", "12", "875", "363", "63", "12", "908", "326", "64", "12", "997", "342", "65", "12", "892", "292", "66", "12", "939", "303", "67", "12", "974", "305", "68", "13", "1016", "302", "69", "13", "956", "262", "70", "13", "933", "252", "71", "13", "961", "174", "72", "14", "999", "245", "73", "14", "1024", "229", "74", "14", "1032", "262", "75", "14", "1071", "251", "76", "14", "1110", "236", "77", "15", "1118", "284", "78", "15", "1048", "370", "79", "15", "1063", "395", "80", "15", "1109", "462", "81", "15", "1090", "401", "82", "15", "1142", "405", "83", "16", "1195", "399", "84", "16", "1082", "327", "85", "16", "1133", "322", "86", "16", "1185", "310", "87", "16", "1154", "358", "88", "16", "1213", "359", "89", "17", "1234", "328", "90", "17", "1161", "233", "91", "17", "1178", "273", "92", "17", "1223", "209", "93", "17", "1252", "257", "94", "18", "1238", "285", "95", "18", "1306", "250", "96", "18", "1379", "240", "97", "18", "1370", "293", "98", "18", "1447", "299", "99", "18", "1438", "228", "100", "19", "1514", "231", "101", "19", "1336", "329", "102", "19", "1397", "346", "103", "19", "1447", "328", "104", "19", "1271", "357", "105", "19", "1314", "384", "106", "19", "1280", "404", "107", "20", "1371", "410", "108", "20", "1409", "372", "109", "20", "1413", "416", "110", "20", "1376", "444", "111", "20", "1439", "431", "112", "21", "1460", "459", "113", "21", "1205", "431", "114", "21", "1261", "459", "115", "21", "1384", "497", "116", "22", "1380", "592", "117", "22", "1439", "581", "118", "22", "1485", "529", "119", "22", "1570", "611", "120", "22", "1655", "631", "121", "0", "1465", "376", "122", "0", "1518", "381", "123", "23", "1549", "697", "124", "23", "1462", "726", "125", "23", "1528", "746", "126", "23", "1577", "743", "127", "23", "1539", "806", "128", "23", "1656", "803", "129", "23", "869", "1047"];

var t = s.length - 2;

while (t >= 0) {
	s[t] = (parseInt(s[t]) - 0).toString();
    t = t - 4;
}

var p = s.length - 1;

while (p >= 0) {
	s[p] = (parseInt(s[p]) - 137).toString();
    p = p - 4;
}

f = s.join('", "');
w = '"' + f + '"';
document.writeln(w);

-----THIS IS JS CODE THAT TAKES A LONG STRING OF DATA ENTERED INTO ANY ARRAY AND CHANGES EVERY NTH VALUE TO WHATEVER YOU CHOOSE-----



var s = ["35", "7", "1357", "844", "36", "7", "735", "93", "37", "7", "733", "38", "38", "7", "773", "48", "39", "7", "804", "70", "40", "7", "829", "33", "41", "8", "834", "96", "42", "8", "1012", "603", "43", "8", "1112", "544", "44", "8", "987", "562", "45", "8", "1019", "532", "46", "9", "976", "513", "47", "9", "1006", "462", "48", "9", "953", "442", "49", "9", "981", "376", "50", "9", "930", "395", "51", "10", "885", "397", "52", "10", "1058", "478", "53", "10", "1077", "442", "54", "10", "1079", "397", "55", "10", "1031", "372", "56", "11", "1029", "302", "57", "11", "974", "299", "58", "11", "944", "350", "59", "11", "885", "347", "60", "11", "838", "325", "61", "12", "899", "288", "62", "12", "875", "226", "63", "12", "908", "189", "64", "12", "997", "205", "65", "12", "892", "155", "66", "12", "939", "166", "67", "12", "974", "168", "68", "13", "1016", "165", "69", "13", "956", "125", "70", "13", "933", "115", "71", "13", "961", "37", "72", "14", "999", "108", "73", "14", "1024", "92", "74", "14", "1032", "125", "75", "14", "1071", "114", "76", "14", "1110", "99", "77", "15", "1118", "147", "78", "15", "1048", "233", "79", "15", "1063", "258", "80", "15", "1109", "325", "81", "15", "1090", "264", "82", "15", "1142", "268", "83", "16", "1195", "262", "84", "16", "1082", "190", "85", "16", "1133", "185", "86", "16", "1185", "173", "87", "16", "1154", "221", "88", "16", "1213", "222", "89", "17", "1234", "191", "90", "17", "1161", "96", "91", "17", "1178", "136", "92", "17", "1223", "72", "93", "17", "1252", "120", "94", "18", "1238", "148", "95", "18", "1306", "113", "96", "18", "1379", "103", "97", "18", "1370", "156", "98", "18", "1447", "162", "99", "18", "1438", "91", "100", "19", "1514", "94", "101", "19", "1336", "192", "102", "19", "1397", "209", "103", "19", "1447", "191", "104", "19", "1271", "220", "105", "19", "1314", "247", "106", "19", "1280", "267", "107", "20", "1371", "273", "108", "20", "1409", "235", "109", "20", "1413", "279", "110", "20", "1376", "307", "111", "20", "1439", "294", "112", "21", "1460", "322", "113", "21", "1205", "294", "114", "21", "1261", "322"];

var t = s.length - 4;

while (t >= 0) {
	s[t] = (parseInt(s[t]) - 1).toString();
    t = t - 4;
}


f = s.join('", "');
w = '"' + f + '"';
document.writeln(w);


---EXTENSION---



def getTurnNumber():
    imgBox = (57, 153, 128, 180)
    #imgScanRGB = ImageGrab.grab(imgBox)
    #imgScanBGR = cv2.cvtColor(np.asarray(imgScanRGB), cv2.COLOR_RGB2BGR)
    imgScanBGR = cv2.imread('turnNumbersRaw0.png', 1)
    hsvImg = cv2.cvtColor(imgScanBGR, cv2.COLOR_RGB2HSV)

    lower_limit = np.array([10, 220, 240])
    upper_limit = np.array([230, 255, 255])

    imgMask = cv2.inRange(hsvImg, lower_limit, upper_limit)

    cv2.imwrite(os.getcwd() + '\\full_snap__' + str(int(time.time())) + '.png', imgMask)

    return ("who cares")

-----idk-----



for pt in zip(*loc[::-1]):
    centerX = pt[0] + w
    centerY = pt[1] + h
    cv2.rectangle(imgScanBGR, pt, (centerX, centerY), (255, 255, 255), 2)
    if centerY not in armyNumbers:
        armyNumbers[centerY] = []
    
    armyNumbers[centerY].append((centerX, digit))

-----DRAW RECTANGLES AROUND FOUND DIGITS-----



def getTurnNumber():
    smallBox = (57, 153, 128, 180)
    smallImg = ImageGrab.grab(smallBox)
    textFound = tes.image_to_string(smallImg)
    smallImg.show()
    return textFound

-----TESSERACT-----



for playerRegion in playerRegions:
        superRegionId = map.getRegionById(playerRegion[0]).superRegion
        if superRegion not in checkedBonuses:
            viability = bonusEfficiencies[superRegionId][1] * 100
            outsideRegions = []

            for subRegionId in map.getSuperRegionById(superRegionId).regionIds:
                subRegion = map.getRegionById(subRegionId)
                reduceViability = True
                for subRegionNeighbor in subRegion.neighbors:
                    if subRegionNeighbor.superRegion != subRegion.superRegion:
                        if subRegionNeighbor in outsideRegions:
                            [item for item in outsideRegions if item[0] == 1][1] += 1
                        else:
                            outsideRegions.append((subRegionNeighbor.id, 1))
                        if reduceViability:
                            viability -= 1 ### -1 viability for every territory that borders a territory on the ouside of the bonus
                            reduceViability = False
            
            print(playerRegion[0])
            print(viability)
            print(outsideRegions)
            checkedBonuses.append(superRegionId)

-----CHECK FOR NEARBY TERRITORIES-----